%% ===================================================================
%% @author Krzysztof Trzepla
%% @copyright (C): 2014 ACK CYFRONET AGH
%% This software is released under the MIT license
%% cited in 'LICENSE.txt'
%% @end
%% ===================================================================
%% @doc: This module sends requests to Global Registry using REST API.
%% @end
%% ===================================================================

-module(gr_endpoint).

-include("global_registry/gr_types.hrl").

%% API
-export([provider_request/2, provider_request/3]).
-export([user_request/3, user_request/4]).

%% ====================================================================
%% API functions
%% ====================================================================

%% provider_request/2
%% ====================================================================
%% @doc Sends provider request to Global Registry with default headers
%% and options using REST API. Request body is empty.
-spec provider_request(URI :: uri(), Method :: method()) -> Result when
    Result :: {ok, Status :: string(), ResponseHeaders :: binary(), ResponseBody :: binary()} | {error, Reason :: term()}.
%% ====================================================================
provider_request(URI, Method) ->
    provider_request(URI, Method, []).


%% provider_request/3
%% ====================================================================
%% @doc Sends provider request to Global Registry with default headers
%% and options using REST API.
-spec provider_request(URI :: uri(), Method :: method(), Body :: body()) -> Result when
    Result :: {ok, Status :: string(), ResponseHeaders :: binary(), ResponseBody :: binary()} | {error, Reason :: term()}.
%% ====================================================================
provider_request(URI, Method, Body) ->
    request(URI, Method, [], Body, []).


%% user_request/3
%% ====================================================================
%% @doc Sends user request to Global Registry with default headers
%% and options using REST API. Request body is empty. User's access token
%% generated by Global Registry must be provided.
-spec user_request(URI :: uri(), Method :: method(), AccessToken :: binary()) -> Result when
    Result :: {ok, Status :: string(), ResponseHeaders :: binary(), ResponseBody :: binary()} | {error, Reason :: term()}.
%% ====================================================================
user_request(URI, Method, AccessToken) ->
    user_request(URI, Method, [], AccessToken).


%% user_request/4
%% ====================================================================
%% @doc Sends user request to Global Registry with default headers
%% and options using REST API. User's access token generated by Global
%% Registry must be provided.
-spec user_request(URI :: uri(), Method :: method(), Body :: body(), AccessToken :: binary()) -> Result when
    Result :: {ok, Status :: string(), ResponseHeaders :: binary(), ResponseBody :: binary()} | {error, Reason :: term()}.
%% ====================================================================
user_request(URI, Method, Body, AccessToken) ->
    Headers = [{"authorization", binary_to_list(<<"Bearer ", AccessToken/binary>>)}],
    request(URI, Method, Headers, Body, []).


%% ====================================================================
%% Internal functions
%% ====================================================================

%% request/5
%% ====================================================================
%% @doc Sends request to Global Registry using REST API.
-spec request(URI :: uri(), Method :: method(), Headers :: headers(), Body :: body(), Options :: list()) -> Result when
    Result :: {ok, Status :: string(), ResponseHeaders :: binary(), ResponseBody :: binary()} | {error, Reason :: term()}.
%% ====================================================================
request(URI, Method, Headers, Body, Options) ->
    URL = gr_plugin:get_gr_url(),
    KeyPath = gr_plugin:get_key_path(),
    CertPath = gr_plugin:get_cert_path(),
    CACertPath = gr_plugin:get_cacert_path(),
    {ok, Key} = file:read_file(KeyPath),
    {ok, Cert} = file:read_file(CertPath),
    {ok, CACert} = file:read_file(CACertPath),
    [{KeyType, KeyEncoded, _} | _] = public_key:pem_decode(Key),
    [{_, CertEncoded, _} | _] = public_key:pem_decode(Cert),
    [{_, CACertEncoded, _} | _] = public_key:pem_decode(CACert),
    SSLOptions = {ssl_options, [{cacerts, [CACertEncoded]}, {key, {KeyType, KeyEncoded}}, {cert, CertEncoded}]},
    ibrowse:send_req(URL ++ URI, [{"content_type", "application/json"} | Headers], Method, Body, [SSLOptions | Options]).